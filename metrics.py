import toml
import ibis

import streamlit as st
import plotly.express as px

from dotenv import load_dotenv
from datetime import datetime, timedelta

# options
## load .env
load_dotenv()

## config.toml
config = toml.load("config.toml")["app"]

## streamlit config
st.set_page_config(layout="wide")

## ibis config
con = ibis.connect(f"duckdb://{config['database']}", read_only=True)


def fmt_number(value):
    return f"{value:,}"

def delta(current, previous):
    delta = current - previous
    pct_change = int(round(100.0 * delta / previous, 0))
    return f"{fmt_number(delta)} ({pct_change:d}%)"


vulnerabilities = con.table("vulnerabilities_and_categories")

# variables
with st.form(key="app"):
    days = st.number_input(
        "X days",
        min_value=1,
        max_value=120,
        value=30,
        step=30,
        format="%d",
    )
    update_button = st.form_submit_button(label="update")


START = datetime.now() - timedelta(days=days * 2)
STOP = datetime.now() - timedelta(days=days)

total_vul, total_vul_prev = (
    vulnerabilities.agg(
        total_vul=vulnerabilities.id.nunique(where=vulnerabilities.published >= STOP),
        total_vul_prev=vulnerabilities.id.nunique(
            where=vulnerabilities.published.between(START, STOP)
        ),
    )
    .to_pandas()
    .squeeze()
)


mean_score=vulnerabilities.filter(vulnerabilities.published >= STOP).distinct(on="id").primary_score.mean(),
mean_score_prev=vulnerabilities.filter(vulnerabilities.published.between(START, STOP)).distinct(on="id").primary_score.mean()


f"""
## totals (last {days} days)
"""
col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    st.metric(
        label="Total Vulnerabilities",
        value=fmt_number(total_vul),
        delta=delta(total_vul, total_vul_prev),
    )

with col2:
    st.metric(
        label="Average score",
        value=fmt_number(mean_score),
        delta=delta(mean_score, mean_score_prev)
    )