import os
import ibis
import time
import json
import inspect
import requests
from typing import List


import logging as log

from ibis import _
from dotenv import load_dotenv
from datetime import datetime, timedelta, date
from pydash import at

from helpers import get_cwe_list
from cve_params import CveRequestParams


# main function
def main():
    # load environment variables
    load_dotenv()

    # ingest CWE list
    ingest_cwe()
    # ingest data
    ingest_nvd_cves()

def ingest_cwe():
    cwe_list = get_cwe_list()
    if cwe_list:
        output_dir = os.path.join(
            "data",
            "ingest",
            "cwe",
        )
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, "cwe.json")
        write_json(cwe_list, output_path)

# helper functions
def write_json(data, filename):
    # write the data to a file
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)


# ingest functions
def ingest_nvd_cves():
    """
    Ingest from https://nvd.nist.gov/ CVE API.
    """
    # configure logger
    log.basicConfig(level=log.INFO)

    # constants
    API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"

    # load environment variables
    NVD_TOKEN = os.getenv("NVD_TOKEN")

    # construct header
    headers = {
        "Authorization": f"Bearer {NVD_TOKEN}",
    }

    # pubStartDate & pubEndDate
    # #[YYYY][“-”][MM][“-”][DD][“T”][HH][“:”][MM][“:”][SS][Z]

    # cvssV4Severity
    # #LOW
    # #MEDIUM
    # #HIGH
    # #CRITICAL

    # define helper functions
    def get_filename(query_name, page):
        # return the filename
        return f"{query_name}.{page:06}.json"
    
    def build_parmas_list(pub_start_date: datetime, pub_end_date: datetime, severities) -> List[CveRequestParams]:
        params_list = []
        for severity in severities:
            (severity_key, severity_value), = severity.items()
            params_list.append(CveRequestParams(pub_start_date, pub_end_date, severity_key, severity_value))
        return params_list

    def fetch_data(client, pub_start_date, pub_end_date, severities, output_dir):        
        # initialize page number
        page = 1
        for params in build_parmas_list(pub_start_date, pub_end_date, severities):

            # while True
            while True:
            # request data
                try:
                    log.info(f"\t\tFetching page {page}...")
                    resp = requests.get(
                        API_URL,
                        headers=headers,
                        params=params.params_as_dict(),
                    )
                    json_data = resp.json()

                    log.info(f"\t\t\tStatus code: {resp.status_code}")
                    # log.info(f"\t\t\tResponse: {resp.text}")
                    log.info(f"\t\t\tJSON: {json_data}")

                    if resp.status_code != 200:
                        log.error(
                            f"\t\tFailed to fetch data; url={API_URL}\n\n {resp.status_code}\n {resp.text}"
                        )
                        return

                    # extract data
                    data = json_data["vulnerabilities"]
                    resultsPerPage, startIndex, totalResults = at(json_data,"resultsPerPage", "startIndex", "totalResults")
                    has_next_page = startIndex + resultsPerPage > totalResults

                    # save json to a file
                    params_str = str(params)
                    filename = get_filename(f"cve_{params_str}", page)
                    output_path = os.path.join(output_dir, filename)
                    log.info(f"\t\tWriting data to {output_path}")
                    write_json(data, output_path)

                    print(f"has_next_page={has_next_page}")
                    if not has_next_page:
                        break

                    # increment page number
                    page += 1
                except Exception as e:
                    # print error if response
                    log.error(f"\t\tFailed to fetch data: {e}")

                    try:
                        log.error(f"\t\t\tResponse: {resp.text}")
                    except:
                        pass

                    break
    NOW = datetime.now()
    NOW_120 = NOW - timedelta(days=120)
    
    # create a requests session
    with requests.Session() as client:
        pub_start_date = NOW_120
        pub_end_date = NOW
        output_dir = os.path.join(
            "data",
            "ingest",
            "nvd",
        )
        os.makedirs(output_dir, exist_ok=True)
        log.info(f"\tFetching data for nvd vulnerabilities...")
        fetch_data(client, pub_start_date, pub_end_date, severities=[{"cvssV4Severity": "HIGH"}, {"cvssV4Severity": "CRITICAL"}], 
                   output_dir=output_dir)

if __name__ == "__main__":
    main()